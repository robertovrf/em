data Big {
	int min
	int max
}

data Small {
	int min
	int max
}

data Repeatability {
	int min
	int max
}

data Total {
	int min
	int max
}

data Int {
	int num
}

data ReqCount {
	char input[]
	int count
}

data Input {
	char composition[]
	ReqCount reqs[]
}

component provides App requires io.Output out, data.IntUtil iu, data.StringUtil strUtil,
	io.TextFile, data.adt.HashTable {

	Big big
	Small small
	Repeatability repeat
	Total total
	Input inputs[]
	ReqCount exploitation[]

	void loadExploration(char fileName[]) {
		TextFile file = new TextFile(fileName, File.READ)
		char buf[]
		while ((buf = file.readLine()) != null) {
			if (strUtil.find(buf, ":") != StringUtil.NOT_FOUND) {
				inputs = new Input[](inputs, new Input(buf, null))
			}
			if (strUtil.find(buf, "/") != StringUtil.NOT_FOUND) {
				String myreq[] = strUtil.explode(buf, " - ")
				inputs[inputs.arrayLength-1].reqs = new ReqCount[](inputs[inputs.arrayLength-1].reqs,
					new ReqCount(myreq[0].string, iu.intFromString(myreq[1].string)))
			}
		}
		file.close()
	}

	// function that helps in the debugging process
	void printInputs() {
		for (int i = 0; i < inputs.arrayLength; i++) {
			out.println("$(inputs[i].composition):")
			for (int j = 0; j < inputs[i].reqs.arrayLength; j++) {
				out.println("\t $(inputs[i].reqs[j].input) - $(iu.intToString(inputs[i].reqs[j].count))")
			}
		}
	}

	int processBig(ReqCount reqs[]) {
		int numBig = 0
		for (int i = 0; i < reqs.arrayLength; i++) {
			if ((strUtil.find(reqs[i].input, "last")
				== StringUtil.NOT_FOUND)) {
				numBig = numBig + reqs[i].count
			}
		}
		return numBig
	}

	int processSmall(ReqCount reqs[]) {
		int numSmall = 0
		for (int i = 0; i < reqs.arrayLength; i++) {
			if ((strUtil.find(reqs[i].input, "last") 
				!= StringUtil.NOT_FOUND)) {
				numSmall = numSmall + reqs[i].count
			}
		}
		return numSmall
	}

	int processRepetitions(ReqCount reqs[]) {
		int numRepetition = 0
		for (int i = 0; i < reqs.arrayLength; i++) {
			if (numRepetition < reqs[i].count) {
				numRepetition = reqs[i].count
			}
		}
		return numRepetition - 1
	}

	int processTotal(ReqCount reqs[]) {
		int numTotal = 0
		for (int i = 0; i < reqs.arrayLength; i++) {
			numTotal = numTotal + reqs[i].count
		}
		return numTotal
	}

	void loadExploitation(char fileName[]) {
		TextFile file = new TextFile(fileName, File.READ)
		char buf[]
		while ((buf = file.readLine()) != null) {
			String myreq[] = strUtil.explode(buf, " - ")
			//out.println("$(buf)")
			exploitation = new ReqCount[](exploitation, new ReqCount(myreq[0].string, 
				iu.intFromString(myreq[1].string)))
		}
		file.close()
	}
	
	int App:main(AppParam params[]) {
		big = null
		small = null
		repeat = null
		inputs = null
		exploitation = null
		total = null
		loadExploration("Trace1/exploration_trace1updated.txt")
		big = new Big()
		big.min = 1000
		small = new Small()
		small.min = 1000
		repeat = new Repeatability()
		repeat.min = 1000
		total = new Total()
		total.min = 1000
		int bigNum = 0
		int smallNum = 0
		int repeatNum = 0
		int totalNum = 0
		for (int i = 0; i < inputs.arrayLength; i++) {
			totalNum = processTotal(inputs[i].reqs)
			bigNum = (processBig(inputs[i].reqs)*100)/totalNum
			smallNum = (processSmall(inputs[i].reqs)*100)/totalNum
			repeatNum = (processRepetitions(inputs[i].reqs)*100)/totalNum
			if (big.max < bigNum) {
				big.max = bigNum
			}
			if (big.min > bigNum) {
				big.min = bigNum
			}
			if (small.max < smallNum) {
				small.max = smallNum
			}
			if (small.min > smallNum) {
				small.min = smallNum
			}
			if (repeat.max < repeatNum) {
				repeat.max = repeatNum
			}
			if (repeat.min > repeatNum) {
				repeat.min = repeatNum
			}
			if (total.max < totalNum) {
				total.max = totalNum
			}
			if (total.min > totalNum) {
				total.min = totalNum
			}
			//debug
			/*out.println("Environment 1 - $(inputs[i].composition)")
			out.println("Big: $(iu.intToString(bigNum))%")
			out.println("Small: $(iu.intToString(smallNum))%")
			out.println("Repetition: $(iu.intToString(repeatNum))%")
			out.println("Total: $(iu.intToString(totalNum))\n")*/
		}
		out.println("Environment 1:")
		out.println("Big: $(iu.intToString(big.min))% - $(iu.intToString(big.max))%")
		out.println("Small: $(iu.intToString(small.min))% - $(iu.intToString(small.max))%")
		out.println("Repetition: $(iu.intToString(repeat.min))% - $(iu.intToString(repeat.max))%")
		out.println("Total: $(iu.intToString(total.min)) - $(iu.intToString(total.max))\n\n")

		big = null
		small = null
		repeat = null
		inputs = null
		exploitation = null
		total = null
		loadExploration("Trace2/exploration_trace2.txt")
		big = new Big()
		big.min = 1000
		small = new Small()
		small.min = 1000
		repeat = new Repeatability()
		repeat.min = 1000
		total = new Total()
		total.min = 1000
		bigNum = 0
		smallNum = 0
		repeatNum = 0
		totalNum = 0
		for (int i = 0; i < inputs.arrayLength; i++) {
			totalNum = processTotal(inputs[i].reqs)
			bigNum = (processBig(inputs[i].reqs)*100)/totalNum
			smallNum = (processSmall(inputs[i].reqs)*100)/totalNum
			repeatNum = (processRepetitions(inputs[i].reqs)*100)/totalNum
			if (big.max < bigNum) {
				big.max = bigNum
			}
			if (big.min > bigNum) {
				big.min = bigNum
			}
			if (small.max < smallNum) {
				small.max = smallNum
			}
			if (small.min > smallNum) {
				small.min = smallNum
			}
			if (repeat.max < repeatNum) {
				repeat.max = repeatNum
			}
			if (repeat.min > repeatNum) {
				repeat.min = repeatNum
			}
			if (total.max < totalNum) {
				total.max = totalNum
			}
			if (total.min > totalNum) {
				total.min = totalNum
			}
			//debug
			/*out.println("Environment 2 - $(inputs[i].composition)")
			out.println("Big: $(iu.intToString(bigNum))%")
			out.println("Small: $(iu.intToString(smallNum))%")
			out.println("Repetition: $(iu.intToString(repeatNum))%")
			out.println("Total: $(iu.intToString(totalNum))\n")*/
		}
		out.println("Environment 2:")
		out.println("Big: $(iu.intToString(big.min))% - $(iu.intToString(big.max))%")
		out.println("Small: $(iu.intToString(small.min))% - $(iu.intToString(small.max))%")
		out.println("Repetition: $(iu.intToString(repeat.min))% - $(iu.intToString(repeat.max))%")
		out.println("Total: $(iu.intToString(total.min)) - $(iu.intToString(total.max))\n\n")

		big = null
		small = null
		repeat = null
		inputs = null
		exploitation = null
		total = null
		loadExploration("Trace3/exploration_trace3.txt")
		big = new Big()
		big.min = 1000
		small = new Small()
		small.min = 1000
		repeat = new Repeatability()
		repeat.min = 1000
		total = new Total()
		total.min = 1000
		bigNum = 0
		smallNum = 0
		repeatNum = 0
		totalNum = 0
		for (int i = 0; i < inputs.arrayLength; i++) {
			/* debugging msgs */
			totalNum = processTotal(inputs[i].reqs)
			bigNum = (processBig(inputs[i].reqs)*100)/totalNum
			smallNum = (processSmall(inputs[i].reqs)*100)/totalNum
			repeatNum = (processRepetitions(inputs[i].reqs)*100)/totalNum
			if (big.max < bigNum) {
				big.max = bigNum
			}
			if (big.min > bigNum) {
				big.min = bigNum
			}
			if (small.max < smallNum) {
				small.max = smallNum
			}
			if (small.min > smallNum) {
				small.min = smallNum
			}
			if (repeat.max < repeatNum) {
				repeat.max = repeatNum
			}
			if (repeat.min > repeatNum) {
				repeat.min = repeatNum
			}
			if (total.max < totalNum) {
				total.max = totalNum
			}
			if (total.min > totalNum) {
				total.min = totalNum
			}
			// debug
			/*out.println("Environment 3 - $(inputs[i].composition)")
			out.println("Big: $(iu.intToString(bigNum))%")
			out.println("Small: $(iu.intToString(smallNum))%")
			out.println("Repetition: $(iu.intToString(repeatNum))%")
			out.println("Total: $(iu.intToString(totalNum))\n")*/
		}
		out.println("Environment 3:")
		out.println("Big: $(iu.intToString(big.min))% - $(iu.intToString(big.max))%")
		out.println("Small: $(iu.intToString(small.min))% - $(iu.intToString(small.max))%")
		out.println("Repetition: $(iu.intToString(repeat.min))% - $(iu.intToString(repeat.max))%")
		out.println("Total: $(iu.intToString(total.min)) - $(iu.intToString(total.max))\n\n")
		return 0
	}
}
