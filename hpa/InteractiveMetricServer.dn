// *************************
// Module that interacts with HPA
// Author: Roberto Rodrigues Filho
// April @ 2021
// *************************

/******* constants *******/
const char debugMSG[]               = "[@InteractiveMetricServer]"
const char URL[]                    = "localhost"
const char RESPONSE_TIME[] 			= "response_time"
const char REGISTER[] 				= "register"
const char HPA_RESPONSE[] 			= "hpa_response"
const char RESTART[] 				= "restart"
const char LEARNING[]				= "learning"
const char RESTARTLEARNING[]		= "restartlearning"
const char STOPLEARNING[]			= "stoplearning"
const char CHANGECOMP[]				= "changecomp"
const char STARTTEST[]				= "starttest"
const char COMMAND[]				= "command"
const char END[]	 				= "\r\n\r\n"
const int PORT 	                    = 2006
/*************************/

/******* component *******/
component provides App requires io.Output out, data.IntUtil iu, net.TCPSocket, 
	data.StringUtil strUtil, data.json.JSONParser parser, time.Timer t,
	data.DecUtil du, io.Input in {

	/******* functions *******/
    TCPSocket connect() {
        TCPSocket s = new TCPSocket()
		if (!s.connect(URL, PORT)) { 
			out.println(new char[]("Error while trying", 
				"to connect to server", 
				"$(URL)", 
				" - $(iu.intToString(PORT))"))
		}
        return s
    }

	int registerHPA() {
		int id = 0
		TCPSocket s = connect()
		s.send(new char[](REGISTER, "|", END))
		char buf[] = readFromSocket(s)
		s.disconnect()
		String helper[] = strUtil.explode(buf, "|")
		id = iu.intFromString(helper[1].string)
		return id
	}

	void sendValue(dec value, int id) {
		TCPSocket s = connect()
		char msg[] = new char[](RESPONSE_TIME, "|", du.decToString(value), "|", 
			iu.intToString(id), END)
		s.send(msg)
        // get the command message
        // send the OK message or the no OK message to test
        char buf[] = readFromSocket(s)
        if (buf == "OK") {
            out.println("$(debugMSG) OK!")
        } else {
            out.println("$(debugMSG) $(buf)")
            s.send(new char[]("OK", END))
        }
		s.disconnect()
	}

    void sendCommand(char command[], char params[]) {
        TCPSocket s = connect()
        char msg[] = new char[](COMMAND, "|", command, "|", params, END)
		s.send(msg)
        char buf[] = readFromSocket(s)
		s.disconnect()
    }

    char[] readFromSocket(TCPSocket socket) {
		char buf[] = null
		char last4[] = new char[4]
		while (last4 != "\r\n\r\n") {
			char b[] = socket.recv(1)
			buf = new char[](buf, b)
			last4[0] = last4[1]
			last4[1] = last4[2]
			last4[2] = last4[3]
			last4[3] = b[0]
		}
        String helper[] = strUtil.explode(buf, END)
		return helper[0].string
	}

	void restart() {
		TCPSocket s = connect()
		char msg[] = new char[](RESTART, "|", END)
		s.send(msg)
		s.disconnect()
	}

	bool getAvg() {
		int id = 0
		TCPSocket s = connect()
		s.send(new char[]("hpa_response", "|", END))
		char buf[] = readFromSocket(s)
		s.disconnect()
		String helper[] = strUtil.explode(buf, "|")
		out.println("$(helper[0].string) - $(helper[1].string) - $(helper[2].string) - $(helper[3].string)")
		return true
	}

	void interpret(char cmd[]) {
		if (cmd == "exit") {
		} else if (cmd == "avg") {
			getAvg()
		} else if (cmd == "register") {
			int id = registerHPA()
			out.println("$(debugMSG) REGISTERED! ID: $(iu.intToString(id))")
		} else if (cmd == "send") {
			out.print("$(debugMSG) id: ")
			char id[] = in.readln()
			out.print("$(debugMSG) value: ")
			char value[] = in.readln()
			sendValue(du.decFromString(value), iu.intFromString(id))
		} else if (cmd == "restart") {
			restart()
		} else if (cmd == "command") {
            out.print("$(debugMSG) Command: ")
            char command[] = in.readln()
            out.print("$(debugMSG) Params: ")
            char params[] = in.readln()
            sendCommand(command, params)
        } else if (cmd == "test") {
			while (true) {
				t.sleep(5000)
				getAvg()
			}
		}
	}
    /*************************/

    /******* entry-point *******/
	int App:main(AppParam params[]) {
		char cmd[] = ""
		while (cmd != "exit") {
			out.print("prompt> ")
			cmd = in.readln()
			interpret(cmd)
		}
		return 0
	}
    /*************************/
} 
/*************************/