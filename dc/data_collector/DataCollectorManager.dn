/* DataCollectorManager.dn
 *
 * This component is responsible to implement the business logic of the 
 * DataCollector microservice.
 *
 * This version includes:
 *  - implementation of the storeData as a way to support synchronous data insertion;
 *  - implementation all functions in DataCollector;
 * More info at:
 *  - http://playground.interscity.org/#/
 *
 * Author: Marcio P Sa - May @ 2018
 * Changes: Roberto Rodrigues Filho - Sept @ 2018, Aug @ 2022
 */
const char debugMSG[] = "[@DataCollectorManager]"

component provides data_collector.DataCollectorManager requires io.Output out,
	data.json.JSONEncoder encoder, encoding.Encoder:uri codifier, data.mysql.MySQL, 
	os.SystemInfo info {

	static char host[] = null
	static Mutex lock = new Mutex()

	MySQL getMySQL() {
		MySQL mysql = null
		if (host == null) {
			host = info.getVariable("DATABASE_HOST")	
		}
		char user[] = "root"
		char pass[] = "root"
		mysql = new MySQL(host, 3306, user, pass, "data_collector")
		return mysql
	}

	// NOTE: This is a problem for the NFRProxy
	// "/collector/store/{uuid}" This is a temporary solution for storing data whilst AMQP is not supported by DANA
	void DataCollectorManager:storeData(byte content[], char id[], DocStreamDC s) {
		MySQL mysql = getMySQL()
		mysql.execute(new char[]("INSERT INTO data (value, uuid) VALUES (\"", codifier.encode(content)
			,"\", \"", id ,"\");"))
		mysql.close()
	}

	// "/collector/resources/data" Get historical data of sensor capabilities of all city resources
	void DataCollectorManager:getHistoricalData(DocStreamDC stream) {
		queryExec(new char[]("SELECT * FROM data ORDER BY id_data;"), stream)
		//fakeQueryExec(stream)
	}

	// "/collector/resources/{uuid}/data" Get historical data of sensor capabilities of a specific city resource
	void DataCollectorManager:getHistoricalDataResource(char uuid[], DocStreamDC stream) {
		queryExec(new char[]("SELECT * FROM data WHERE uuid = \"", uuid, "\" ORDER BY id_data;"), stream)
		//fakeQueryExec(stream)
	}

	// "/collector/resources/data/last" Get the most recent data of sensor capabilities from all city resources
	//NOTE: this only works on MySQL 8.0
	void DataCollectorManager:getMostRecentData(DocStreamDC stream) {
		queryExec(new char[]("SELECT * from (SELECT *, row_number() OVER(PARTITION BY uuid ORDER BY id_data) AS rowCount FROM data) AS a WHERE rowCount = 1 ORDER BY id_data;"), stream)
		//fakeQueryExec(stream)
	}

	// "/collector/resources/{uuid}/data/last" Get the most recent data of sensor capabilities from a specific city resource
	void DataCollectorManager:getMostRecentDataResource(char uuid[], DocStreamDC stream) {
		queryExec(new char[]("SELECT * FROM data WHERE uuid = \"", uuid, "\" ORDER BY id_data DESC LIMIT 1;"), stream)
		//fakeQueryExec(stream)
	}

	void fakeQueryExec(DocStreamDC stream) {
		stream.write("{ \"data\": [{\"uuuid\": \"o1ii3o9i90i3\"}, {\"uuuid\": \"o1ii3o9i90i3\"}, {\"uuuid\": \"o1ii3o9i90i3\"}]}")
	}

	// implementing chunked transfer protocol 
	void queryExec(char query[], DocStreamDC stream) {
		MySQL mysql
		MySQLRow rows[]
		mutex(lock) {
			mysql = getMySQL()
			mysql.execute(query)
			rows = mysql.fetchAll()
		}
		if (rows == null) {
			stream.write("{\"error\": \"resource data not found\"}")
		} else {
			stream.write("{ \"data\": [ ")
			for (int i = 0; i < rows.arrayLength; i++) {
				char helper[] = null
				if (i != 0) { helper = ", " }
				stream.write(new char[](helper, codifier.decode(rows[i].fields[1].value)))
			}
			stream.write("] }")
		}
		mysql.close()
	}
}
