/* WebDC.dn
 *
 * This works as a dispatcher to send data to microservices.
 *
 * Author: Roberto Rodrigues Filho - Sept @ 2018
 * Changed: Roberto Rodrigues Filho - Jun @ 2020
 */
component provides wsms.Web:nfrp requires io.Output out, data.StringUtil strUtil,
	data_collector.DataCollectorManager dataCollectorManager {

	bool match(char path[], char expr[]) {
		String helper[] = strUtil.explode(path, "?")
		String dirs[] = strUtil.explode(helper[0].string, "/")
		String exprDirs[] = strUtil.explode(expr, "/")
		if (dirs.arrayLength != exprDirs.arrayLength) { return false }
		for (int i = 0; i < exprDirs.arrayLength; i++) {
			if ((dirs[i].string != exprDirs[i].string) && (exprDirs[i].string != "*")) {
				return false
			}
		}
		return true
	}

	void failed(DocStreamDC s) {
		s.write("{\"response\" : \"failed\"}")
	}

	bool Web:get(char path[], DocStreamDC stream, HashTable params) {
		// getting id from params
		if (params == null) { failed(stream) }
		String idStr = params.get("id")
		char id[] = idStr.string
		// handling request 
		if (match(path, "/collector/resources/data")) {
			dataCollectorManager.getHistoricalData(stream)
		} else if (match(path, "/collector/resources/*/data")) {
			dataCollectorManager.getHistoricalDataResource(id, stream)
		} else if (match(path, "/collector/resources/data/last")) {
			dataCollectorManager.getMostRecentData(stream)
		} else if (match(path, "/collector/resources/*/data/last")) {
			dataCollectorManager.getMostRecentDataResource(id, stream)
		} else if (match(path, "/collector/resources/ping")) {
			stream.write("{\"ping_response\": \"OK\"}")
		} else { failed(stream) }
		return true
	}

	bool Web:post(char path[], char contentType[], byte content[], DocStreamDC stream, HashTable params) {
		// getting id from params
		if (params == null) { failed(stream) }
		String idStr = params.get("id")
		char id[] = idStr.string
		// handling requests
		if (match(path, "/collector/store/*")) {
			dataCollectorManager.storeData(content, id, stream)
		} else { failed(stream) }
		return true
	}
	
	bool Web:put(char path[], char contentType[], byte content[], DocStreamDC stream, HashTable params) {
		return false
	}

	bool Web:delete(char path[], char contentType[], byte content[], DocStreamDC stream, HashTable params) {
		return false
	}

	String[] Web:getURLPatterns() {
		String exprs[] = new String[]()
		exprs = new String[](exprs, new String("/collector/store/{id}"))
		exprs = new String[](exprs, new String("/collector/resources/{id}/data"))
		exprs = new String[](exprs, new String("/collector/resources/{id}/data/last"))
		return exprs
	}
}
